[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 5

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "ColorAdd"

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="VisualShaderNodeVectorClamp" id=5]

[resource]
code = "shader_type canvas_item;
uniform vec4 ColorAdd : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:6
	vec3 n_out6p0 = ColorAdd.rgb;
	float n_out6p1 = ColorAdd.a;

// Input:3

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out5p0 = TEXTURE_tex_read.rgb;
		n_out5p1 = TEXTURE_tex_read.a;
	}

// VectorOp:7
	vec3 n_out7p0 = n_out6p0 + n_out5p0;

// VectorClamp:8
	vec3 n_in8p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in8p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out8p0 = clamp(n_out7p0, n_in8p1, n_in8p2);

// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -391, 36 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 780, 320 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -200, 340 )
nodes/fragment/5/node = SubResource( 2 )
nodes/fragment/5/position = Vector2( 0, 300 )
nodes/fragment/6/node = SubResource( 3 )
nodes/fragment/6/position = Vector2( 40, 200 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( 356, 224 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( 560, 240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 2, 5, 1, 0, 1, 5, 0, 7, 1, 6, 0, 7, 0, 7, 0, 8, 0, 8, 0, 0, 0 )
